using Microsoft.CodeAnalysis;

namespace Jewelry.EditingSystem.CommunityToolkit.Mvvm;

[Generator(LanguageNames.CSharp)]
public class HistoryGenerator : IIncrementalGenerator
{
    private const string UndoableAttributeName = "UndoableAttribute";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(static context =>
        {
            context.AddSource($"{UndoableAttributeName}.g.cs", $$"""
using System;
namespace Jewelry.EditingSystem.CommunityToolkit.Mvvm;

[AttributeUsage(AttributeTargets.Field)]
public sealed class {{UndoableAttributeName}} : Attribute
{
}
""");
        });

        var source = context.SyntaxProvider.ForAttributeWithMetadataName(
            $"Jewelry.EditingSystem.CommunityToolkit.Mvvm.{UndoableAttributeName}",
            predicate: static (node, _) => true,
            transform: static (context, token) => context);

        context.RegisterSourceOutput(source, Emit);
    }

    private static void Emit(SourceProductionContext context,
        GeneratorAttributeSyntaxContext source)
    {
        if (source.TargetSymbol is not IFieldSymbol fieldSymbol)
            return;

        var fieldName = fieldSymbol.Name;
        var propertyName = fieldName.TrimStart('_');
        var @namespace = $"{fieldSymbol.ContainingNamespace}";
        var @class = fieldSymbol.ContainingType.Name;
        var type = $"{fieldSymbol.Type}";
        var nullable = fieldSymbol.Type.IsReferenceType ? "?" : "";

        var filename = $"{fieldSymbol}.g.cs";
        var historyObject = "_history";

        var code = $$"""
// <auto-generated/>
#pragma warning disable
#nullable enable

namespace {{@namespace}};

partial class {{@class}}
{
    void ES_On{{propertyName}}Changing({{type}}{{nullable}} oldValue, {{type}} newValue)
    {
        this.SetEditableProperty({{historyObject}}, v =>
        {
            if ({{historyObject}}.IsInUndoing == false)
                return;

            OnPropertyChanging(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangingArgs.{{propertyName}});

            {{fieldName}} = v;

            OnPropertyChanged(global::CommunityToolkit.Mvvm.ComponentModel.__Internals.__KnownINotifyPropertyChangedArgs.{{propertyName}});
        }, oldValue, newValue);
    }
}
""";

        context.AddSource(filename, code);
    }
}